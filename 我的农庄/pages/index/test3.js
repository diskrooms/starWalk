// pages/index/test.js
const app = getApp()
const util = require('../../utils/util.js')
var canvasPixelsData1 = []
Page({
  /**
   * 页面的初始数据
   */
  data: {

    'imagePath': '../../images/flower.png',
    'canvasPixelsData': [],
    'imageWidth': 207,
    'imageHeight': 288,
    'count': 0,
    'pointerStack': [],      //点堆栈
    'shiftPointerStack': [], //存放已弹出的栈元素
    'colorIndex1': [7588, 7589, 7590, 7591, 7794, 7795, 7796, 7797, 7798, 8000, 8001, 8002, 8003, 8004, 8207, 8208, 8209, 8210, 8211, 8413, 8414, 8415, 8416, 8417, 8418, 8619, 8620, 8621, 8622, 8623, 8624, 8625, 8826, 8827, 8828, 8829, 8830, 8831, 8832, 9032, 9033, 9034, 9035, 9036, 9037, 9038, 9039, 9238, 9239, 9240, 9241, 9242, 9243, 9244, 9245, 9246, 9445, 9446, 9447, 9448, 9449, 9450, 9451, 9452, 9453, 9651, 9652, 9653, 9654, 9655, 9656, 9657, 9658, 9659, 9660, 9858, 9859, 9860, 9861, 9862, 9863, 9864, 9865, 9866, 9867, 10064, 10065, 10066, 10067, 10068, 10069, 10070, 10071, 10072, 10073, 10270, 10271, 10272, 10273, 10274, 10275, 10276, 10277, 10278, 10279, 10280, 10477, 10478, 10479, 10480, 10481, 10482, 10483, 10484, 10485, 10486, 10487, 10683, 10684, 10685, 10686, 10687, 10688, 10689, 10690, 10691, 10692, 10693, 10694, 10890, 10891, 10892, 10893, 10894, 10895, 10896, 10897, 10898, 10899, 10900, 10901, 11096, 11097, 11098, 11099, 11100, 11101, 11102, 11103, 11104, 11105, 11106, 11107, 11108, 11303, 11304, 11305, 11306, 11307, 11308, 11309, 11310, 11311, 11312, 11313, 11314, 11315, 11509, 11510, 11511, 11512, 11513, 11514, 11515, 11516, 11517, 11518, 11519, 11520, 11521, 11522, 11715, 11716, 11717, 11718, 11719, 11720, 11721, 11722, 11723, 11724, 11725, 11726, 11727, 11728, 11922, 11923, 11924, 11925, 11926, 11927, 11928, 11929, 11930, 11931, 11932, 11933, 11934, 11935, 12128, 12129, 12130, 12131, 12132, 12133, 12134, 12135, 12136, 12137, 12138, 12139, 12140, 12141, 12142, 12335, 12336, 12337, 12338, 12339, 12340, 12341, 12342, 12343, 12344, 12345, 12346, 12347, 12348, 12349, 12541, 12542, 12543, 12544, 12545, 12546, 12547, 12548, 12549, 12550, 12551, 12552, 12553, 12554, 12555, 12556, 12748, 12749, 12750, 12751, 12752, 12753, 12754, 12755, 12756, 12757, 12758, 12759, 12760, 12761, 12762, 12763, 12954, 12955, 12956, 12957, 12958, 12959, 12960, 12961, 12962, 12963, 12964, 12965, 12966, 12967, 12968, 12969, 12970, 13161, 13162, 13163, 13164, 13165, 13166, 13167, 13168, 13169, 13170, 13171, 13172, 13173, 13174, 13175, 13176, 13367, 13368, 13369, 13370, 13371, 13372, 13373, 13374, 13375, 13376, 13377, 13378, 13379, 13380, 13381, 13382, 13383, 13574, 13575, 13576, 13577, 13578, 13579, 13580, 13581, 13582, 13583, 13584, 13585, 13586, 13587, 13588, 13589, 13590, 13780, 13781, 13782, 13783, 13784, 13785, 13786, 13787, 13788, 13789, 13790, 13791, 13792, 13793, 13794, 13795, 13796, 13797, 13987, 13988, 13989, 13990, 13991, 13992, 13993, 13994, 13995, 13996, 13997, 13998, 13999, 14000, 14001, 14002, 14003, 14004, 14193, 14194, 14195, 14196, 14197, 14198, 14199, 14200, 14201, 14202, 14203, 14204, 14205, 14206, 14207, 14208, 14209, 14210, 14211, 14400, 14401, 14402, 14403, 14404, 14405, 14406, 14407, 14408, 14409, 14410, 14411, 14412, 14413, 14414, 14415, 14416, 14417, 14418, 14606, 14607, 14608, 14609, 14610, 14611, 14612, 14613, 14614, 14615, 14616, 14617, 14618, 14619, 14620, 14621, 14622, 14623, 14624, 14813, 14814, 14815, 14816, 14817, 14818, 14819, 14820, 14821, 14822, 14823, 14824, 14825, 14826, 14827, 14828, 14829, 14830, 14831, 15019, 15020, 15021, 15022, 15023, 15024, 15025, 15026, 15027, 15028, 15029, 15030, 15031, 15032, 15033, 15034, 15035, 15036, 15037, 15038, 15226, 15227, 15228, 15229, 15230, 15231, 15232, 15233, 15234, 15235, 15236, 15237, 15238, 15239, 15240, 15241, 15242, 15243, 15244, 15245, 15432, 15433, 15434, 15435, 15436, 15437, 15438, 15439, 15440, 15441, 15442, 15443, 15444, 15445, 15446, 15447, 15448, 15449, 15450, 15451, 15452, 15639, 15640, 15641, 15642, 15643, 15644, 15645, 15646, 15647, 15648, 15649, 15650, 15651, 15652, 15653, 15654, 15655, 15656, 15657, 15658, 15659, 15846, 15847, 15848, 15849, 15850, 15851, 15852, 15853, 15854, 15855, 15856, 15857, 15858, 15859, 15860, 15861, 15862, 15863, 15864, 15865, 15866, 16052, 16053, 16054, 16055, 16056, 16057, 16058, 16059, 16060, 16061, 16062, 16063, 16064, 16065, 16066, 16067, 16068, 16069, 16070, 16071, 16072, 16259, 16260, 16261, 16262, 16263, 16264, 16265, 16266, 16267, 16268, 16269, 16270, 16271, 16272, 16273, 16274, 16275, 16276, 16277, 16278, 16279, 16465, 16466, 16467, 16468, 16469, 16470, 16471, 16472, 16473, 16474, 16475, 16476, 16477, 16478, 16479, 16480, 16481, 16482, 16483, 16484, 16485, 16486, 16672, 16673, 16674, 16675, 16676, 16677, 16678, 16679, 16680, 16681, 16682, 16683, 16684, 16685, 16686, 16687, 16688, 16689, 16690, 16691, 16692, 16693, 16878, 16879, 16880, 16881, 16882, 16883, 16884, 16885, 16886, 16887, 16888, 16889, 16890, 16891, 16892, 16893, 16894, 16895, 16896, 16897, 16898, 16899, 16900, 17085, 17086, 17087, 17088, 17089, 17090, 17091, 17092, 17093, 17094, 17095, 17096, 17097, 17098, 17099, 17100, 17101, 17102, 17103, 17104, 17105, 17106, 17107, 17291, 17292, 17293, 17294, 17295, 17296, 17297, 17298, 17299, 17300, 17301, 17302, 17303, 17304, 17305, 17306, 17307, 17308, 17309, 17310, 17311, 17312, 17313, 17498, 17499, 17500, 17501, 17502, 17503, 17504, 17505, 17506, 17507, 17508, 17509, 17510, 17511, 17512, 17513, 17514, 17515, 17516, 17517, 17518, 17519, 17520, 17704, 17705, 17706, 17707, 17708, 17709, 17710, 17711, 17712, 17713, 17714, 17715, 17716, 17717, 17718, 17719, 17720, 17721, 17722, 17723, 17724, 17725, 17726, 17727, 17911, 17912, 17913, 17914, 17915, 17916, 17917, 17918, 17919, 17920, 17921, 17922, 17923, 17924, 17925, 17926, 17927, 17928, 17929, 17930, 17931, 17932, 17933, 17934, 18118, 18119, 18120, 18121, 18122, 18123, 18124, 18125, 18126, 18127, 18128, 18129, 18130, 18131, 18132, 18133, 18134, 18135, 18136, 18137, 18138, 18139, 18140, 18141, 18324, 18325, 18326, 18327, 18328, 18329, 18330, 18331, 18332, 18333, 18334, 18335, 18336, 18337, 18338, 18339, 18340, 18341, 18342, 18343, 18344, 18345, 18346, 18347, 18531, 18532, 18533, 18534, 18535, 18536, 18537, 18538, 18539, 18540, 18541, 18542, 18543, 18544, 18545, 18546, 18547, 18548, 18549, 18550, 18551, 18552, 18553, 18554, 18737, 18738, 18739, 18740, 18741, 18742, 18743, 18744, 18745, 18746, 18747, 18748, 18749, 18750, 18751, 18752, 18753, 18754, 18755, 18756, 18757, 18758, 18759, 18760, 18761, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951, 18952, 18953, 18954, 18955, 18956, 18957, 18958, 18959, 18960, 18961, 18962, 18963, 18964, 18965, 18966, 18967, 18968, 19150, 19151, 19152, 19153, 19154, 19155, 19156, 19157, 19158, 19159, 19160, 19161, 19162, 19163, 19164, 19165, 19166, 19167, 19168, 19169, 19170, 19171, 19172, 19173, 19174, 19175, 19357, 19358, 19359, 19360, 19361, 19362, 19363, 19364, 19365, 19366, 19367, 19368, 19369, 19370, 19371, 19372, 19373, 19374, 19375, 19376, 19377, 19378, 19379, 19380, 19381, 19564, 19565, 19566, 19567, 19568, 19569, 19570, 19571, 19572, 19573, 19574, 19575, 19576, 19577, 19578, 19579, 19580, 19581, 19582, 19583, 19584, 19585, 19586, 19587, 19588, 19770, 19771, 19772, 19773, 19774, 19775, 19776, 19777, 19778, 19779, 19780, 19781, 19782, 19783, 19784, 19785, 19786, 19787, 19788, 19789, 19790, 19791, 19792, 19793, 19794, 19795, 19977, 19978, 19979, 19980, 19981, 19982, 19983, 19984, 19985, 19986, 19987, 19988, 19989, 19990, 19991, 19992, 19993, 19994, 19995, 19996, 19997, 19998, 19999, 20000, 20001, 20002, 20183, 20184, 20185, 20186, 20187, 20188, 20189, 20190, 20191, 20192, 20193, 20194, 20195, 20196, 20197, 20198, 20199, 20200, 20201, 20202, 20203, 20204, 20205, 20206, 20207, 20208, 20209, 20390, 20391, 20392, 20393, 20394, 20395, 20396, 20397, 20398, 20399, 20400, 20401, 20402, 20403, 20404, 20405, 20406, 20407, 20408, 20409, 20410, 20411, 20412, 20413, 20414, 20415, 20596, 20597, 20598, 20599, 20600, 20601, 20602, 20603, 20604, 20605, 20606, 20607, 20608, 20609, 20610, 20611, 20612, 20613, 20614, 20615, 20616, 20617, 20618, 20619, 20620, 20621, 20622, 20803, 20804, 20805, 20806, 20807, 20808, 20809, 20810, 20811, 20812, 20813, 20814, 20815, 20816, 20817, 20818, 20819, 20820, 20821, 20822, 20823, 20824, 20825, 20826, 20827, 20828, 20829, 21010, 21011, 21012, 21013, 21014, 21015, 21016, 21017, 21018, 21019, 21020, 21021, 21022, 21023, 21024, 21025, 21026, 21027, 21028, 21029, 21030, 21031, 21032, 21033, 21034, 21035, 21036, 21216, 21217, 21218, 21219, 21220, 21221, 21222, 21223, 21224, 21225, 21226, 21227, 21228, 21229, 21230, 21231, 21232, 21233, 21234, 21235, 21236, 21237, 21238, 21239, 21240, 21241, 21242, 21243, 21423, 21424, 21425, 21426, 21427, 21428, 21429, 21430, 21431, 21432, 21433, 21434, 21435, 21436, 21437, 21438, 21439, 21440, 21441, 21442, 21443, 21444, 21445, 21446, 21447, 21448, 21449, 21629, 21630, 21631, 21632, 21633, 21634, 21635, 21636, 21637, 21638, 21639, 21640, 21641, 21642, 21643, 21644, 21645, 21646, 21647, 21648, 21649, 21650, 21651, 21652, 21653, 21654, 21655, 21656, 21836, 21837, 21838, 21839, 21840, 21841, 21842, 21843, 21844, 21845, 21846, 21847, 21848, 21849, 21850, 21851, 21852, 21853, 21854, 21855, 21856, 21857, 21858, 21859, 21860, 21861, 21862, 21863, 22043, 22044, 22045, 22046, 22047, 22048, 22049, 22050, 22051, 22052, 22053, 22054, 22055, 22056, 22057, 22058, 22059, 22060, 22061, 22062, 22063, 22064, 22065, 22066, 22067, 22068, 22069, 22070, 22249, 22250, 22251, 22252, 22253, 22254, 22255, 22256, 22257, 22258, 22259, 22260, 22261, 22262, 22263, 22264, 22265, 22266, 22267, 22268, 22269, 22270, 22271, 22272, 22273, 22274, 22275, 22276, 22456, 22457, 22458, 22459, 22460, 22461, 22462, 22463, 22464, 22465, 22466, 22467, 22468, 22469, 22470, 22471, 22472, 22473, 22474, 22475, 22476, 22477, 22478, 22479, 22480, 22481, 22482, 22483, 22662, 22663, 22664, 22665, 22666, 22667, 22668, 22669, 22670, 22671, 22672, 22673, 22674, 22675, 22676, 22677, 22678, 22679, 22680, 22681, 22682, 22683, 22684, 22685, 22686, 22687, 22688, 22689, 22690, 22869, 22870, 22871, 22872, 22873, 22874, 22875, 22876, 22877, 22878, 22879, 22880, 22881, 22882, 22883, 22884, 22885, 22886, 22887, 22888, 22889, 22890, 22891, 22892, 22893, 22894, 22895, 22896, 22897, 23076, 23077, 23078, 23079, 23080, 23081, 23082, 23083, 23084, 23085, 23086, 23087, 23088, 23089, 23090, 23091, 23092, 23093, 23094, 23095, 23096, 23097, 23098, 23099, 23100, 23101, 23102, 23103, 23282, 23283, 23284, 23285, 23286, 23287, 23288, 23289, 23290, 23291, 23292, 23293, 23294, 23295, 23296, 23297, 23298, 23299, 23300, 23301, 23302, 23303, 23304, 23305, 23306, 23307, 23308, 23309, 23310, 23489, 23490, 23491, 23492, 23493, 23494, 23495, 23496, 23497, 23498, 23499, 23500, 23501, 23502, 23503, 23504, 23505, 23506, 23507, 23508, 23509, 23510, 23511, 23512, 23513, 23514, 23515, 23516, 23517, 23695, 23696, 23697, 23698, 23699, 23700, 23701, 23702, 23703, 23704, 23705, 23706, 23707, 23708, 23709, 23710, 23711, 23712, 23713, 23714, 23715, 23716, 23717, 23718, 23719, 23720, 23721, 23722, 23723, 23902, 23903, 23904, 23905, 23906, 23907, 23908, 23909, 23910, 23911, 23912, 23913, 23914, 23915, 23916, 23917, 23918, 23919, 23920, 23921, 23922, 23923, 23924, 23925, 23926, 23927, 23928, 23929, 23930, 24109, 24110, 24111, 24112, 24113, 24114, 24115, 24116, 24117, 24118, 24119, 24120, 24121, 24122, 24123, 24124, 24125, 24126, 24127, 24128, 24129, 24130, 24131, 24132, 24133, 24134, 24135, 24136, 24137, 24315, 24316, 24317, 24318, 24319, 24320, 24321, 24322, 24323, 24324, 24325, 24326, 24327, 24328, 24329, 24330, 24331, 24332, 24333, 24334, 24335, 24336, 24337, 24338, 24339, 24340, 24341, 24342, 24343, 24344, 24522, 24523, 24524, 24525, 24526, 24527, 24528, 24529, 24530, 24531, 24532, 24533, 24534, 24535, 24536, 24537, 24538, 24539, 24540, 24541, 24542, 24543, 24544, 24545, 24546, 24547, 24548, 24549, 24550, 24728, 24729, 24730, 24731, 24732, 24733, 24734, 24735, 24736, 24737, 24738, 24739, 24740, 24741, 24742, 24743, 24744, 24745, 24746, 24747, 24748, 24749, 24750, 24751, 24752, 24753, 24754, 24755, 24756, 24757, 24935, 24936, 24937, 24938, 24939, 24940, 24941, 24942, 24943, 24944, 24945, 24946, 24947, 24948, 24949, 24950, 24951, 24952, 24953, 24954, 24955, 24956, 24957, 24958, 24959, 24960, 24961, 24962, 24963, 24964, 25142, 25143, 25144, 25145, 25146, 25147, 25148, 25149, 25150, 25151, 25152, 25153, 25154, 25155, 25156, 25157, 25158, 25159, 25160, 25161, 25162, 25163, 25164, 25165, 25166, 25167, 25168, 25169, 25170, 25348, 25349, 25350, 25351, 25352, 25353, 25354, 25355, 25356, 25357, 25358, 25359, 25360, 25361, 25362, 25363, 25364, 25365, 25366, 25367, 25368, 25369, 25370, 25371, 25372, 25373, 25374, 25375, 25376, 25377, 25555, 25556, 25557, 25558, 25559, 25560, 25561, 25562, 25563, 25564, 25565, 25566, 25567, 25568, 25569, 25570, 25571, 25572, 25573, 25574, 25575, 25576, 25577, 25578, 25579, 25580, 25581, 25582, 25583, 25584, 25761, 25762, 25763, 25764, 25765, 25766, 25767, 25768, 25769, 25770, 25771, 25772, 25773, 25774, 25775, 25776, 25777, 25778, 25779, 25780, 25781, 25782, 25783, 25784, 25785, 25786, 25787, 25788, 25789, 25790, 25968, 25969, 25970, 25971, 25972, 25973, 25974, 25975, 25976, 25977, 25978, 25979, 25980, 25981, 25982, 25983, 25984, 25985, 25986, 25987, 25988, 25989, 25990, 25991, 25992, 25993, 25994, 25995, 25996, 25997, 26175, 26176, 26177, 26178, 26179, 26180, 26181, 26182, 26183, 26184, 26185, 26186, 26187, 26188, 26189, 26190, 26191, 26192, 26193, 26194, 26195, 26196, 26197, 26198, 26199, 26200, 26201, 26202, 26203, 26381, 26382, 26383, 26384, 26385, 26386, 26387, 26388, 26389, 26390, 26391, 26392, 26393, 26394, 26395, 26396, 26397, 26398, 26399, 26400, 26401, 26402, 26403, 26404, 26405, 26406, 26407, 26408, 26409, 26410, 26588, 26589, 26590, 26591, 26592, 26593, 26594, 26595, 26596, 26597, 26598, 26599, 26600, 26601, 26602, 26603, 26604, 26605, 26606, 26607, 26608, 26609, 26610, 26611, 26612, 26613, 26614, 26615, 26616, 26794, 26795, 26796, 26797, 26798, 26799, 26800, 26801, 26802, 26803, 26804, 26805, 26806, 26807, 26808, 26809, 26810, 26811, 26812, 26813, 26814, 26815, 26816, 26817, 26818, 26819, 26820, 26821, 26822, 26823, 27001, 27002, 27003, 27004, 27005, 27006, 27007, 27008, 27009, 27010, 27011, 27012, 27013, 27014, 27015, 27016, 27017, 27018, 27019, 27020, 27021, 27022, 27023, 27024, 27025, 27026, 27027, 27028, 27029, 27208, 27209, 27210, 27211, 27212, 27213, 27214, 27215, 27216, 27217, 27218, 27219, 27220, 27221, 27222, 27223, 27224, 27225, 27226, 27227, 27228, 27229, 27230, 27231, 27232, 27233, 27234, 27235, 27236, 27414, 27415, 27416, 27417, 27418, 27419, 27420, 27421, 27422, 27423, 27424, 27425, 27426, 27427, 27428, 27429, 27430, 27431, 27432, 27433, 27434, 27435, 27436, 27437, 27438, 27439, 27440, 27441, 27442, 27621, 27622, 27623, 27624, 27625, 27626, 27627, 27628, 27629, 27630, 27631, 27632, 27633, 27634, 27635, 27636, 27637, 27638, 27639, 27640, 27641, 27642, 27643, 27644, 27645, 27646, 27647, 27648, 27649, 27828, 27829, 27830, 27831, 27832, 27833, 27834, 27835, 27836, 27837, 27838, 27839, 27840, 27841, 27842, 27843, 27844, 27845, 27846, 27847, 27848, 27849, 27850, 27851, 27852, 27853, 27854, 27855, 28034, 28035, 28036, 28037, 28038, 28039, 28040, 28041, 28042, 28043, 28044, 28045, 28046, 28047, 28048, 28049, 28050, 28051, 28052, 28053, 28054, 28055, 28056, 28057, 28058, 28059, 28060, 28061, 28062, 28242, 28243, 28244, 28245, 28246, 28247, 28248, 28249, 28250, 28251, 28252, 28253, 28254, 28255, 28256, 28257, 28258, 28259, 28260, 28261, 28262, 28263, 28264, 28265, 28266, 28267, 28268, 28449, 28450, 28451, 28452, 28453, 28454, 28455, 28456, 28457, 28458, 28459, 28460, 28461, 28462, 28463, 28464, 28465, 28466, 28467, 28468, 28469, 28470, 28471, 28472, 28473, 28474, 28475, 28657, 28658, 28659, 28660, 28661, 28662, 28663, 28664, 28665, 28666, 28667, 28668, 28669, 28670, 28671, 28672, 28673, 28674, 28675, 28676, 28677, 28678, 28679, 28680, 28681, 28682, 28864, 28865, 28866, 28867, 28868, 28869, 28870, 28871, 28872, 28873, 28874, 28875, 28876, 28877, 28878, 28879, 28880, 28881, 28882, 28883, 28884, 28885, 28886, 28887, 28888, 29071, 29072, 29073, 29074, 29075, 29076, 29077, 29078, 29079, 29080, 29081, 29082, 29083, 29084, 29085, 29086, 29087, 29088, 29089, 29090, 29091, 29092, 29093, 29094, 29095, 29279, 29280, 29281, 29282, 29283, 29284, 29285, 29286, 29287, 29288, 29289, 29290, 29291, 29292, 29293, 29294, 29295, 29296, 29297, 29298, 29299, 29300, 29301, 29486, 29487, 29488, 29489, 29490, 29491, 29492, 29493, 29494, 29495, 29496, 29497, 29498, 29499, 29500, 29501, 29502, 29503, 29504, 29505, 29506, 29507, 29508, 29693, 29694, 29695, 29696, 29697, 29698, 29699, 29700, 29701, 29702, 29703, 29704, 29705, 29706, 29707, 29708, 29709, 29710, 29711, 29712, 29713, 29714, 29901, 29902, 29903, 29904, 29905, 29906, 29907, 29908, 29909, 29910, 29911, 29912, 29913, 29914, 29915, 29916, 29917, 29918, 29919, 29920, 29921, 30108, 30109, 30110, 30111, 30112, 30113, 30114, 30115, 30116, 30117, 30118, 30119, 30120, 30121, 30122, 30123, 30124, 30125, 30126, 30127, 30315, 30316, 30317, 30318, 30319, 30320, 30321, 30322, 30323, 30324, 30325, 30326, 30327, 30328, 30329, 30330, 30331, 30332, 30333, 30334, 30523, 30524, 30525, 30526, 30527, 30528, 30529, 30530, 30531, 30532, 30533, 30534, 30535, 30536, 30537, 30538, 30539, 30540, 30730, 30731, 30732, 30733, 30734, 30735, 30736, 30737, 30738, 30739, 30740, 30741, 30742, 30743, 30744, 30745, 30746, 30747, 30938, 30939, 30940, 30941, 30942, 30943, 30944, 30945, 30946, 30947, 30948, 30949, 30950, 30951, 30952, 30953, 30954, 31145, 31146, 31147, 31148, 31149, 31150, 31151, 31152, 31153, 31154, 31155, 31156, 31157, 31158, 31159, 31160, 31352, 31353, 31354, 31355, 31356, 31357, 31358, 31359, 31360, 31361, 31362, 31363, 31364, 31365, 31366, 31367, 31560, 31561, 31562, 31563, 31564, 31565, 31566, 31567, 31568, 31569, 31570, 31571, 31572, 31573, 31767, 31768, 31769, 31770, 31771, 31772, 31773, 31774, 31775, 31776, 31777, 31778, 31779, 31780, 31974, 31975, 31976, 31977, 31978, 31979, 31980, 31981, 31982, 31983, 31984, 31985, 31986, 32182, 32183, 32184, 32185, 32186, 32187, 32188, 32189, 32190, 32191, 32192, 32193, 32389, 32390, 32391, 32392, 32393, 32394, 32395, 32396, 32397, 32398, 32399, 32596, 32597, 32598, 32599, 32600, 32601, 32602, 32603, 32604, 32605, 32606, 32804, 32805, 32806, 32807, 32808, 32809, 32810, 32811, 32812, 32813, 33011, 33012, 33013, 33014, 33015, 33016, 33017, 33018, 33019, 33218, 33219, 33220, 33221, 33222, 33223, 33224, 33225, 33226, 33426, 33427, 33428, 33429, 33430, 33431, 33432],       //区域1颜色索引
    'colorIndex2': [],
    'colorIndex3': []
  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {

  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {
    const ctx = wx.createCanvasContext('myCanvas')
    this.setData({ 'ctx': ctx })
    /*ctx.moveTo(150, 150)
    ctx.arc(150, 150, 50, -Math.PI/2+0.2, 0)
    ctx.stroke()      //描线 
    ctx.fill();     //填充
    
    ctx.beginPath();
    ctx.moveTo(150, 150)
    ctx.setFillStyle('#EEEEEE')
    ctx.arc(150, 150, 50, 0, Math.PI +0.5)
    ctx.fill();     //填充

    ctx.beginPath();
    ctx.moveTo(150, 150)
    ctx.setFillStyle('#FF0000')
    ctx.arc(150, 150, 50, Math.PI + 0.5, -Math.PI / 2 + 0.2)
    ctx.fill();     //填充
    ctx.draw()*/

    ctx.drawImage(this.data.imagePath, 0, 0, this.data.imageWidth/3, this.data.imageHeight/3)
    ctx.draw()
  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {

  },

  //
  toFill: function (e) {
    this._init(this.data.imageWidth, this.data.imageHeight)
    if (canvasPixelsData1.length == 0) {
      return
    }

    //this._fill(e.touches[0].x,e.touches[0].y,[255,0,0,255],[0,0,0,255])
    //var temp = this._findXPoints(e.touches[0].x, e.touches[0].y, [0, 0, 0, 255]);
    //e.detail.x = 30  //38
    //e.detail.y = 41  //66

    /*this._fillOneLine(e.detail.x, e.detail.y, [255, 0, 0, 255], [0, 0, 0, 255])
    while (this.data.pointerStack.length > 0){
      var _temp = this.data.pointerStack.shift()
      //this.data.shiftPointerStack.push(_temp)
      this._fillOneLine(_temp[0], _temp[1], [255, 0, 0, 255], [0, 0, 0, 255])
    }
      //以下为获取像素点数据使用
      var _pixelPointers = [];      //以像素点组织的数据
      var _data = canvasPixelsData1
      for (var i = 0; i < _data.length; i = i + 4) {
        _pixelPointers.push(_data.slice(i, i + 4))
      }
      //查找区域块像素点
      var _pixelIndex = []
      for (var j = 0; j < _pixelPointers.length; j++) {
        if (_pixelPointers[j].toString() == [255, 0, 0, 255].toString()) {
          _pixelIndex.push(j)
        }
      }
      //console.log(_pixelIndex)
      var data = { 'token': wx.getStorageSync('token'), 'app': 2, '_pixelIndex': _pixelIndex }
      util.request(app.globalData.apiDomain + '/my/collect', 'POST', data, (res) => {

      })*/

    //第二种填充算法 根据点击区域来直接填充像素点数据达到填充目的（效率低）
    /*var _pixelPointers = [];
    var _data = canvasPixelsData1
    for (var i = 0; i < _data.length; i = i + 4) {
      var _temp = _data.slice(i, i + 4);
      var _temp2 = [0,0,0,0]
      _temp2[0] = _temp[0]
      _temp2[1] = _temp[1]
      _temp2[2] = _temp[2]
      _temp2[3] = _temp[3]
      _pixelPointers.push(_temp2)
    }
    console.log('a')
    var _colorIndex1 = this.data.colorIndex1
    //console.log(_colorIndex1)
    for (var j in _colorIndex1){
      _pixelPointers[_colorIndex1[j]] = [255,0,0,255]
    }
    console.log('b')
      //合并数组元素
      var _result = []
      for (var k in _pixelPointers){
        _result = _result.concat(_pixelPointers[k])
      }
      console.log('c')
      _result = new Uint8ClampedArray(_result)
      this.setData({'canvasPixelsData':_result})
      //填充
      console.log('d')
      wx.canvasPutImageData({
        canvasId: 'myCanvas',
        x: 0,
        y: 0,
        width: 100,
        data: _result,
        success(res) { console.log(res) },
        fail(res){ console.log(res)},
        complete(res) { console.log(res)}
      })*/

    //第三种填充方法(效率高)
    var _colorIndex1 = this.data.colorIndex1
    for (var j in _colorIndex1) {
      var _data = canvasPixelsData1
      _data[_colorIndex1[j] * 4] = 255
      _data[_colorIndex1[j] * 4 + 1] = 0
      _data[_colorIndex1[j] * 4 + 2] = 0
      _data[_colorIndex1[j] * 4 + 3] = 255
    }
    //console.log(_data)
    //this.setData({ 'canvasPixelsData': _data })
    canvasPixelsData1 = _data
    //填充
    wx.canvasPutImageData({
      canvasId: 'myCanvas',
      x: 0,
      y: 0,
      width: this.data.imageWidth,
      data: _data,
      success(res) { //console.log(res) 
      },
      fail(res) { //console.log(res) 
      },
      complete(res) { //console.log(res)
       }
    })
    
  },

  //初始化图像数据
  _init: function (width, height) {
    if (canvasPixelsData1.length == 0) {
      //canvasGetImageData 只会执行一次
      wx.canvasGetImageData({
        canvasId: 'myCanvas',
        x: 0,
        y: 0,
        width: width,
        height: height,
        success: (res) => {
          //console.log(res.data)
          //this.setData({ 'canvasPixelsData1': res.data }) //invokeWebviewMethod 最大长度 1048576 考虑分隔图像
          canvasPixelsData1 = res.data
        }
      })
    }
  },
  /**
   * 填充底层算法 TODO 像素比较是一维数组比较效率高还是转换成字符串比较效率高？
   * @param x 点击位置的x坐标
   * @param y 点击位置的y坐标
   * @param fillColor  填充区域像素数据 一维十进制整数数组表示
   * @param boundColor 填充边界像素数据 一维十进制整数数组表示
   */
  _fill: function (x, y, fillColor, boundColor) {
    if (this.data.count > 1000) {
      return;
    }
    var count = this.data.count
    count++;
    this.setData({ 'count': count })
    var currentPixel = this._getPixel(canvasPixelsData1, this.data.imageWidth, x, y)
    var clickPointerColor = this._colorDataSwitch(currentPixel) //点击处像素数据
    //console.log(x)
    //console.log(y)
    //console.log(clickPointerColor)
    var _fillColor = this._colorDataSwitch(fillColor)
    var _boundColor = this._colorDataSwitch(boundColor)
    if (clickPointerColor != _fillColor && clickPointerColor != _boundColor) {
      this._fillOnePointer(x, y, fillColor)
      if (((x + 1) < this.data.imageWidth) && ((y + 1) < this.data.imageHeight)
        && ((x - 1) > 0) && ((y - 1) > 0)) {
        this._fill(x + 1, y, fillColor, boundColor)
        this._fill(x - 1, y, fillColor, boundColor)
        this._fill(x, y + 1, fillColor, boundColor)
        this._fill(x, y - 1, fillColor, boundColor)
      }
    }
  },

  /**
   * 填充一个像素点
   * fillColor 填充区域像素数据 一维数组
   */
  _fillOnePointer(x, y, fillColor) {
    var data = new Uint8ClampedArray(fillColor)
    wx.canvasPutImageData({
      canvasId: 'myCanvas',
      x: x,
      y: y,
      width: 1,
      data: data,
      success(res) { },
      complete(res) { }
    })
  },

  /**
   * 填充一条线
   * x  线段与图形左交点x坐标
   * y  线段y坐标
   * fillColor 一个像素点的图像数据 一维数组
   */
  _fillOneLine(x, y, fillColor, boundColor) {
    //console.log([x,y])
    //检测是否已经填色 如果已经填色 直接返回
    if (this._getPixel(canvasPixelsData1, this.data.imageWidth, x, y).toString() == fillColor.toString()) {
      return
    }
    var left = 0
    var right = 0
    var x = x >>> 0     //移动设备真机上为float类型 开发工具上为整形 注意区别 一定要取整
    var y = y >>> 0
    //var _console = [x,y]
    //console.log(_console)
    for (var i = 1; (x + i) < this.data.imageWidth; i++) {
      //console.log(this._getPixel(canvasPixelsData1, this.data.imageWidth, x + i, y))
      if (this._getPixel(canvasPixelsData1, this.data.imageWidth, x + i, y).toString() == boundColor.toString()) {
        right = x + i    //TODO
        //console.log('right')
        break
      }
    }
    for (var i = 1; (x - i >= 0); i++) {
      if (this._getPixel(canvasPixelsData1, this.data.imageWidth, x - i, y).toString() == boundColor.toString()) {
        left = x - i + 1
        //console.log('left')
        break
      }
    }
    var pointsCount = right - left;
    var _fillColor = this._concat(fillColor, pointsCount)
    var data = new Uint8ClampedArray(_fillColor)

    wx.canvasPutImageData({
      canvasId: 'myCanvas',
      x: left,
      y: y,
      width: right - left,
      height: 1,
      data: data,
      success(res) { //console.log(res)
      },
      fail(res) { console.log(res) },
      complete(res) { //console.log(res)
      }
    })

    //修改canvasPixelsData数据
    var _tempCanvas = this._updateCanvasPixelsData(canvasPixelsData1, this.data.imageWidth, left, right, y, fillColor)
    this.setData({ 'canvasPixelsData': _tempCanvas })
    //console.log([left, right, y])
    this._pushToStack(left, right, y, fillColor, boundColor)
  },

  /**
   * 快速扩充数组元素
   */
  _concat(arr, count) {
    var temp = [];
    for (var i = 0; i < count; i++) {
      temp = temp.concat(arr)
    }
    return temp
  },

  /**
   * 图像数据转换
   * data 图像rgba数据 一维数组
   * return 图像像素的十六进制表示
   */
  _colorDataSwitch: function (data) {
    if (data.length != 4) {
      console.log(data);
      return;
    }
    var color = '#'
    for (var i in data) {
      color += data[i].toString(16).length == 1 ? '0' + data[i].toString(16) : data[i].toString(16)
    }
    return color;
  },

  //根据坐标 x y 计算像素中的值
  _getPixel(arr, width, x, y) {
    //console.log(arr)
    //console.log('--')
    //console.log(width)
    //console.log('--')
    //console.log(x)
    //console.log('--')
    //console.log(y)
    var start = (width * y + x) * 4
    var current = arr.slice(start, start + 4)
    //console.log(current)
    return current
  },

  //根据一个点的坐标计算左右两个交点
  _findXPoints(x, y, boundColor) {
    var left = 0
    var right = 0
    for (var i = 1; ; i++) {
      if (this._getPixel(canvasPixelsData1, this.data.imageWidth, x + i, y).toString() == boundColor.toString()) {
        right = x + i;
        break;
      }
    }
    for (var i = 1; ; i++) {
      if (this._getPixel(canvasPixelsData1, this.data.imageWidth, x - i, y).toString() == boundColor.toString()) {
        left = x - i + 1;
        break;
      }
    }
    return [left, right]
  },

  //根据线段的左右两个端点找到关联点并推入栈
  _pushToStack(x1, x2, y, fillColor, boundColor) {
    var left_top = []
    var right_top = []
    var left_bottom = []
    var right_bottom = []
    //console.log(x1+'-'+x2+'-'+y)
    for (var i = 0; i < 3; i++) {    //3与边界宽度正比关联
      var left_top = this._getPixel(canvasPixelsData1, this.data.imageWidth, x1 + i, y - 1)
      if (left_top.toString() == fillColor.toString()) {
        break
      }
      if (this._colorDataSwitch(left_top) == '#00000000') {
        var exist = 0
        //栈中有相同元素 退出
        for (var k = 0; k < this.data.pointerStack.length; k++) {
          if ([x1 + i, y - 1].toString() == this.data.pointerStack[k].toString()) {
            exist = 1
            break;
          }
        }
        for (var k = 0; k < this.data.shiftPointerStack.length; k++) {
          if ([x1 + i, y - 1].toString() == this.data.shiftPointerStack[k].toString()) {
            exist = 1
            break;
          }
        }

        if (exist == 0) {
          //console.log([x1 + i, y - 1])
          this.data.pointerStack.push([x1 + i, y - 1])
        }
        break
      }
    }
    for (var i = 0; i < 3; i++) {
      var right_top = this._getPixel(canvasPixelsData1, this.data.imageWidth, x2 - i, y - 1)
      if (right_top.toString() == fillColor.toString()) {
        break
      }
      if (this._colorDataSwitch(right_top) == '#00000000') {
        //栈中有相同元素 退出
        /*for (var k = 0; k < this.data.pointerStack.length; k++) {
          if ([x2 - i, y - 1].toString() == this.data.pointerStack[k].toString()) {
            //console.log('exist')
            exist = 1
            break;
          }
        }
        for (var k = 0; k < this.data.shiftPointerStack.length; k++) {
          if ([x2 - i, y - 1].toString() == this.data.shiftPointerStack[k].toString()) {
            //console.log('exist')
            exist = 1
            break;
          }
        }*/
        //console.log([x2 - i, y - 1,i,x1,x2,y])
        this.data.pointerStack.push([x2 - i, y - 1])
        break
      }
    }
    for (var i = 0; i < 3; i++) { // 3与边界宽度正比关联
      var left_bottom = this._getPixel(canvasPixelsData1, this.data.imageWidth, x1 + i, y + 1)
      if (left_bottom.toString() == fillColor.toString()) {
        break
      }
      if (this._colorDataSwitch(left_bottom) == '#00000000') {
        //栈中有相同元素 退出
        /*for (var k = 0; k < this.data.pointerStack.length; k++) {
          if ([x1 + i, y + 1].toString() == this.data.pointerStack[k].toString()) {
            //console.log('exist')
            exist = 1
            break;
          }
        }
        for (var k = 0; k < this.data.shiftPointerStack.length; k++) {
          if ([x1 + i, y + 1].toString() == this.data.shiftPointerStack[k].toString()) {
            //console.log('exist')
            exist = 1
            break;
          }
        } */
        this.data.pointerStack.push([x1 + i, y + 1])
        break
      }
    }
    for (var i = 0; i < 3; i++) {
      var right_bottom = this._getPixel(canvasPixelsData1, this.data.imageWidth, x2 - i, y + 1)
      if (right_bottom.toString() == fillColor.toString()) {
        //console.log(right_bottom)
        break
      }
      //console.log(right_bottom)
      if (this._colorDataSwitch(right_bottom) == '#00000000') {
        //栈中有相同元素 退出
        /*for (var k = 0; k < this.data.pointerStack.length; k++) {
          if ([x2 - i, y + 1].toString() == this.data.pointerStack[k].toString()) {
            //console.log('exist')
            exist = 1
            break;
          }
        }
        for (var k = 0; k < this.data.shiftPointerStack.length; k++) {
          if ([x2 - i, y + 1].toString() == this.data.shiftPointerStack[k].toString()) {
            //console.log('exist')
            exist = 1
            break;
          }
        } */
        this.data.pointerStack.push([x2 - i, y + 1])
        break
      }
    }
  },

  //修改 canvasPixelsData 数据 (连续填充)
  _updateCanvasPixelsData(arr, width, left, right, y, fillColor) {
    var left_start = (width * y + left) * 4
    var right_end = (width * y + right) * 4 + 4
    for (var i = left_start; i < right_end; i++) {
      if ((i % 4) == 0) {
        arr[i] = fillColor[0]
      } else if ((i % 4) == 1) {
        arr[i] = fillColor[1]
      } else if ((i % 4) == 2) {
        arr[i] = fillColor[2]
      } else if ((i % 4) == 3) {
        arr[i] = fillColor[3]
      }
    }
    return arr
  },

})